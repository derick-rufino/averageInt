🚨 ALTÍSSIMA PRIORIDADE - ANTES DE PRODUÇÃO: @critical
	☐ REMOVER texto "Preview" de og:site_name no index.html (linha ~25)
	☐ REMOVER indicadores de preview antes do deploy para produção
	Archive:

PRIORIDADE MÁXIMA - ENTREGA 10 DIAS (13/07 a 23/07/2025): @critical

FOCO: JOGO BASE + PWA + OFFLINE + RANKINGS LOCAIS

SEMANA 1 - PWA CORE (Dias 1-4): ✅ CONCLUÍDO
	PWA - Progressive Web App (OFFLINE ACCESS): @done ✅
		✔ Criar Service Worker (sw.js) para cache offline de recursos estáticos @done
		✔ Implementar estratégias de cache (Cache First para estáticos, Network First para dinâmicos) @done
		✔ Registrar Service Worker no index.html @done
		✔ Adicionar indicador visual de status online/offline @done
		✔ Otimizar manifest.json para melhor experiência PWA @done
		✔ Testar funcionamento offline completo @done
		☐ Implementar botão "Instalar App" com prompt personalizado
	
	Sistema de Versionamento Básico: @done ✅
		✔ Definir versão inicial do projeto como v1.0.0 (primeira versão PWA estável) @done
		✔ Adicionar campo "version" no manifest.json do PWA @done
		✔ Incluir meta tag de versão no index.html @done
		✔ Criar constante VERSION no JavaScript principal @done

SEMANA 2 - RANKINGS + VALIDAÇÃO (Dias 5-10):
	✔ UX Mobile - Otimização para uso com uma mão @done
		✔ Reposicionar jogo mais abaixo na viewport mobile @done
		✔ Aumentar tamanho dos botões principais (Randomize, Submit) @done
		✔ Otimizar alturas de inputs e botões para melhor toque @done
		✔ Ajustar espaçamentos e margens para centralização ideal @done
		✔ Header mais compacto para aproveitar melhor o espaço @done
		✔ Corrigir inconsistências visuais entre localhost e mobile @done
			✔ Remover border-radius indesejado dos cards dicas/pontos/timer @done
			✔ Ajustar tamanho do botão submit para consistência @done

	Modo Difícil - Melhorias:
		☐ Além do timer(que conta a rodada atual para adivinhar o número), Construir *cronômetro* (continua contando enquanto o usuário acertar, em caso de erro, guarda os pontos feitos e reseta)
		☐ Parar o timer, para também o cronometro e guarda os pontos feitos

	Sistema de Pontuação & Rankings Locais: @high
		☐ Guardar os pontos feitos em localStorage
		☐ Comparar os pontos feitos com os pontos guardados no localStorage
		☐ Guardar os 5 pontos mais altos no localStorage e exibir nos rankings
			☐ Guardar 5 sem timer (modos comuns: Aprendiz, Normal, Médio)
			☐ Guardar 5 com timer (modo difícil)
		☐ Novos records devem ser comemorados e exibidos no final da rodada de acertos
		☐ Interface de rankings melhorada (mostrar posição, pontos, data)
	
	Validação & Deploy Final:
		☐ Validar instalação em diferentes dispositivos (Android, iOS, Desktop)
		☐ Testar todos os 4 modos de jogo funcionando offline
		☐ Verificar sistema de dicas funcionando em todos os modos
		☐ Validar salvamento e carregamento de rankings
		☐ Testar responsividade completa (mobile + desktop)
		☐ Criar arquivo CHANGELOG.md básico
		☐ Configurar tags de versão no Git (v1.0.0)
		☐ Deploy final no Vercel com todas as funcionalidades core

FUNCIONALIDADES MANTIDAS - JÁ FUNCIONANDO: ✅
	- 4 Modos de jogo (Aprendiz, Normal, Médio, Difícil)
	- Sistema de dicas dinâmicas completo
	- Interface responsiva (mobile + desktop)
	- Tutorial interativo
	- Feedback visual e animações

FUTURO - QUANDO HOUVER TEMPO E NECESSIDADE: @future

Sistema de Versionamento Avançado:
	☐ Sistema de detecção de nova versão disponível
	☐ Notificação visual para usuário quando há atualização
	☐ Botão "Atualizar App" para forçar reload da nova versão
	☐ Sistema de "O que há de novo" após atualizações
	☐ Query string versionada nos recursos (app.js?v=1.0.0)
	☐ Automatizar bump de versão no deploy

Modo Personalizado - Completo:
	☐ Interface de configuração do modo personalizado
	☐ Slider/input para quantidade de números (3 a 8 caixas)
	☐ Configuração de range de números (mín/máx, incluindo negativos)
	☐ Ajuste de timer (0 = sem tempo, ou entre 15s a 300s)
	☐ Sistema de pontuação fixa: +100 pontos por acerto (não salva)
	☐ Interface diferenciada (cor/selo "Não Ranqueado")

Sistema de Anúncios & Monetização:
	☐ Integração com Google AdSense ou similar
	☐ Sistema de desbloqueio: 1 anúncio = acesso ao modo personalizado
	☐ Cooldown de 1 hora após assistir anúncio
	☐ Sistema de compartilhamento de configurações via URL

Sistema de Versionamento - Funcionalidades Avançadas:
	☐ Sistema de detecção de nova versão disponível
	☐ Notificação visual para usuário quando há atualização
	☐ Botão "Atualizar App" para forçar reload da nova versão
	☐ Sistema de "O que há de novo" após atualizações
	☐ Modal/toast mostrando novidades da versão atual
	☐ Histórico de versões acessível nas configurações do app
	☐ Criar releases no GitHub com notas de versão
	☐ Automatizar bump de versão no deploy (package.json)

Modo Personalizado - Funcionalidades Avançadas:
	☐ Sistema de desbloqueio: 1 anúncio = acesso ao modo personalizado
	☐ Cooldown de 1 hora após assistir anúncio (ou configurável)
	☐ Sistema de compartilhamento de configurações via URL
	☐ Ranking local temporário (apenas visual, não persistente)
	☐ Histórico de configurações usadas na sessão atual

Cards de Compartilhamento:
	☐ Criar cards visuais para pontuação e recordes
	☐ Implementar geração e compartilhamento desses cards como PNG com link para o jogo
	☐ Integrar html2canvas para renderização de cards visuais
	☐ Adicionar Web Share API com fallback para download
	☐ Criar QR code para link do jogo nos cards
	☐ Design responsivo dos cards (formato Instagram/Stories)
	☐ Testar compartilhamento em mobile (Instagram, WhatsApp, etc.)

IMPLEMENTAÇÕES FUTURAS - LONGO PRAZO: @future

Modo Professor - Salas Educacionais Personalizadas: @future @high
	Authentication & Access:
		☐ Implementar Firebase Auth com login Google (Gmail)
		☐ Criar interface de login simples para professores
		☐ Sistema sem anúncios para professores (experiência premium)
		☐ Botão "Apoie o desenvolvedor" no painel do professor
		☐ Acesso de alunos via nickname simples (sem cadastro)
	
	Criação & Configuração de Salas:
		☐ Interface para criar sala personalizada
		☐ Configurar nome da sala/modo customizado
		☐ Definir quantidade de números por rodada (3 a 8 números)
		☐ Configurar range dos números (ex: -50 a 50, 1 a 100, etc.)
		☐ Ajustar tempo por rodada (15s, 30s, 1min, 2min, etc.)
		☐ Definir quantidade total de rodadas (5, 10, 20, personalizado)
		☐ Configurar quantidade de posições no ranking (top 3, 5, 10, todos)
		☐ Definir pontuação por acerto (10, 50, 100 pontos)
		☐ Sistema de templates rápidos (Fácil, Médio, Difícil, Caótico)
		☐ Gerar link compartilhável da sala (URL única)
		☐ Gerar QR Code para acesso rápido dos alunos
	
	Backend & Infraestrutura:
		☐ Configurar Firestore para salvar configurações das salas
		☐ Implementar Firebase Realtime Database para ranking ao vivo
		☐ Sistema de identificação única por sala (room codes)
		☐ Gerenciamento de sessões ativas e expiração de salas
		☐ Sincronização em tempo real entre professor e alunos
	
	Interface de Jogo Educacional:
		☐ Painel do professor: monitor de sala em tempo real
		☐ Visualização de alunos conectados na sala
		☐ Ranking ao vivo durante o jogo (professor e alunos)
		☐ Controles de sala: pausar, continuar, encerrar sessão
		☐ Interface do aluno: entrada via nickname + código da sala
		☐ Adaptação da interface de jogo para regras customizadas
	
	Relatórios & Análises:
		☐ Ranking final detalhado pós-jogo
		☐ Lista completa: nicknames + pontuação + estatísticas
		☐ Exportação como relatório PNG (para impressão/compartilhamento)
		☐ Exportação como CSV (para análise em planilhas)
		☐ Geração de cards visuais do ranking final
		☐ Estatísticas da sessão: tempo médio, acertos/erros, participação
	
	Funcionalidades Avançadas:
		☐ Histórico de salas criadas pelo professor
		☐ Reutilização de configurações salvas
		☐ Integração com Web Share API para compartilhar resultados
	
	Monetização & Sustentabilidade:
		☐ Implementar botão "Apoie este projeto" (não invasivo)
		☐ Sistema de créditos ou selo "Educador Apoiador"
		☐ Planejamento de features premium (estatísticas avançadas, exportações, etc.)
		☐ Manter funcionalidades core sempre gratuitas

IMPLEMENTAÇÕES FUTURAS:

Multiplayer Local - Funcionalidade Social: @future
	☐ Modo 2 jogadores local (alternando turnos)
	☐ Sistema de pontuação competitiva (quem acerta mais em X rodadas)
	☐ Interface split para mostrar pontos de ambos jogadores
	☐ Modo cooperativo (jogadores se ajudam com dicas)
	☐ Sistema de desafios entre jogadores locais

Backend & Rankings Globais - Expansão Online: @future
	☐ API backend simples para rankings globais
	☐ Sistema de nickname para rankings mundiais
	☐ Leaderboards por modo de jogo (Aprendiz, Normal, Médio, Difícil)
	☐ Rankings semanais/mensais além do global
	☐ Sistema de conquistas globais
	☐ Comparação com outros jogadores (percentil)
	☐ API para estatísticas avançadas (tempo médio, dicas usadas, etc.)

CONCLUÍDO ✅ - Sistema de Dicas Dinâmicas: @done
    ✔ Criar o arquivo `dicas.js` contendo todos os arrays de dicas (Aprendiz, Normal, Médio, Difícil e Independentes) @done
	✔ Importar o `dicas.js` no script principal (index.html) @done
	✔ Desenvolver a função de escolha de dica baseada no modo atual e média real @done
	✔ Integrar com HTML - elemento `<p id="message">` para exibir dicas @done
	✔ Implementar acionamento via botão "Dica" @done
	✔ Sistema de custos: dicas dos modos comuns consomem pontos equivalentes à dificuldade, mas permitem uso mesmo sem pontos @done
	✔ Dicas independentes consomem menos pontos (1 ponto) @done
	✔ Modo Difícil: dicas consomem mais pontos (5) e exigem pontos positivos @done
	✔ Sistema de dicas dinâmicas: gera dicas sempre verdadeiras baseadas na média e sequência real @done
	✔ Limite de dicas por rodada implementado (Aprendiz: 1, Normal: 2, Médio: 2, Difícil: 3) @done
	✔ Testado em todos os modos - dicas específicas + independentes funcionando @done
	✔ UX otimizada: dicas claras, úteis e não interferem no desafio principal @done
	✔ Prevenção de dicas falsas através de validação dinâmica @done
	✔ Implementar tutorial interativo para sistema de dicas @done
	✔ Corrigir borda amarela no card de dica principal e sistema de paginação por abas @done
	✔ Corrigir coloração dos ícones (lâmpada e relógio) nas seções do tutorial @done
	✔ Revisar tutorial completo: linguagem direta, acessível, explicativa e concisa @done
	✔ Adicionar exemplo prático de cálculo de média na aba Básico @done
	✔ Melhorar explicação do sistema de dicas (quando pontos são perdidos) @done
	✔ Aprimorar aba Avançado com informações claras sobre modo difícil @done
	✔ Corrigir duplicação de conteúdo na aba de Dicas @done
	✔ Adicionar estilo highlight-secondary para exemplos práticos @done
	✔ Corrigir caracteres Unicode corrompidos (�) no tutorial @done
	✔ Remover duplicação de CSS que estava causando problemas de layout @done
	✔ CORREÇÃO CRÍTICA: Restaurar arquivo HTML gravemente corrompido @done
	✔ Reconstruir arquivo index.html limpo com todo o tutorial corrigido @done

MELHORIAS DE UX - AJUSTES FINOS:
	✔ Adicionar animação sutil ao comprar dicas: -X (escrito pequeno) ao lado dos pontos, por um breve momento @done

LIMPEZA DE CSS - OTIMIZAÇÃO: @done
	✔ Remover variáveis CSS legacy (--bg-blue, --txt-white, etc.) e manter apenas as modernas @done
	✔ Unificar cores dos badges de modo em uma única definição @done
	✔ Consolidar estilos mobile/desktop mantendo apenas diferenças específicas @done
	✔ Remover variáveis CSS não utilizadas (--color-base-* não usadas) @done
	✔ Consolidar sistema de ranking (remover duplicações) @done
	✔ Criar variável única para transições CSS similares @done
	✔ Remover duplicação completa do sistema de tutorial @done
	✔ Implementar feedback visual quando dicas estão esgotadas @done
	✔ Adicionar contador visual de dicas restantes na rodada @done
	✔ Melhorar feedback quando não há pontos suficientes no modo difícil @done
	✔ Reposicionar card de confirmação de dica (não cobrir input) @done

CORREÇÃO DO SISTEMA DE TUTORIAL: @done
	✔ Implementar CSS das abas do tutorial (tutorial-tabs, tutorial-tab-btn, tutorial-panel) @done
	✔ Adicionar animações de transição entre abas @done
	✔ Corrigir estrutura HTML problemática (remover elementos vazios) @done
	✔ Implementar responsividade mobile para o card de tutorial @done
	✔ Ajustar grid de custos das dicas e modos de jogo para mobile @done
	✔ Corrigir inconsistência nas cores dos labels Médio e Difícil (mode-badge e mode-name) @done
	✔ Remover fundos coloridos - aplicar apenas cores de texto nos labels dos modos @done
	✔ Melhorar legibilidade removendo fundos que impediam leitura @done
	✔ Substituir todos os emojis por ícones Font Awesome para consistência visual @done
	✔ Ajustar CSS para ícones Font Awesome (tamanho, cores, herança) @done
	✔ Validar funcionamento completo do sistema de abas @done

LIMPEZA DE ARQUIVOS - CONCLUÍDO: @done ✅
	✔ Remover app_backup_antes_correcao_codificacao.js @done
	✔ Remover index_backup.html @done  
	✔ Remover BUGS_ANALYSIS.md @done
	✔ Remover PWA_IMPLEMENTATION_GUIDE.md (mantido apenas PWA_IMPLEMENTATION_GUIDE_SIMPLE.md) @done
	✔ Atualizar roadmap marcando PWA como concluído @done

===================================================================
HISTÓRICO - CONCLUÍDO ✅
===================================================================

CORREÇÃO DE BUGS CRÍTICOS - CONCLUÍDO: @done
	✔ Bug Mode3 e Mode4: Corrigir falta de currentMode = "3" e currentMode = "4" @done
	✔ Inconsistência de encoding: Corrigir acentos nos toasts (Médio/Difícil) @done
	✔ Breakpoints responsivos: Unificar 768px mobile vs 769px desktop, eliminar conflitos CSS @done
	✔ Bug sistema de dicas: Corrigir função duplicada que impedia uso de múltiplas dicas por rodada @done
	✔ Validar correções com testes manuais completos
