// ========== BASIC FEEDBACK ==========

// Fun√ß√£o para mensagem de sucesso
function showSuccessMessage(message) {
  userMessage.textContent = `‚úÖ ${message}`;
  userMessage.className = "success";

  setTimeout(() => (userMessage.className = ""), 2500);
}

// Fun√ß√£o para mensagem de erro
function showErrorMessage(message) {
  userMessage.textContent = `‚ùå ${message}`;
  userMessage.className = "error";

  setTimeout(() => (userMessage.className = ""), 2500);
}

// Fun√ß√£o para mensagem de dica
function showHintMessage(message) {
  userMessage.textContent = `üí° ${message}`;
  userMessage.className = "warning";

  setTimeout(() => (userMessage.className = ""), 2500);
}

// V√°riaveis globais de estado
//Estado do Jogo
let currentMode = "2"; // modo Normal por padr√£o
let pontos = 0;
let mediaAtual = null;
let tentativaFeita = false; // utilizado para habilitar e desabilitar o input

//Controle do Timer
let countdownInterval = null;
let currentTimerValue = null;

//Sistema de Dicas
let dicaUsada = false; //indica se √© poss√≠vel usar novas dicas ou n√£o
let dicasEstaoDispon√≠veis = false; // indica se as dicas est√£o dispon√≠veis para uso no modo atual ou n√£o

//Vari√°veis DOM (manipula√ß√£o da interface)
//Elementos de display (exibem mensagens, n√∫meros, porntua√ß√µes e o timer)
const num1 = document.getElementById("number1");
const num2 = document.getElementById("number2");
const num3 = document.getElementById("number3");
const num4 = document.getElementById("number4");
const userMessage = document.getElementById("message");
const displayTimer = document.getElementById("timer");
const displayPontos = document.getElementById("currentPoints");
const currentModeDisplay = document.getElementById("currentMode-display");

//Controles do Jogo (bot√µes, inputs)
const randomizeBtn = document.getElementById("randomize-btn");
const formTentativa = document.getElementById("guessForm");
let campoTentativaUsuario = document.getElementById("userGuess");
const botaoEnviarTentativa = document.getElementById("submit");
const botaoPararTimer = document.getElementById("timer-label");
const botaoDica = document.getElementById("hint");

//Fun√ß√µes de Utilidade (Obter, calcular e atribuir valores)
function getNumberValue(element) {
  //declara que cada elemento recebido no par√¢metro ser√° um n√∫mero inteiro
  return parseInt(element.innerText); //E ent√£o retorna o valor (j√° parseado) para onde a fun√ß√£o foi chamada
}

// o "elem" permite que os parametros usados ao chamar essa fun√ß√£o, sejam passados como array
function calcularMedia(elem) {
  const soma = elem.reduce((acc, el) => acc + getNumberValue(el), 0); //soma os valores dos elementos, atrav√©s da redu√ß√£o do array a um √∫nico valor: o reduce tem um acumulador (iniciado em 0) e o valor atual do elemento, que √© armazenado na vari√°vel "el".
  return soma / elem.length; //retorna a m√©dia baseada no n√∫mero de elementos
}

function pontosPorAcerto() {
  if (currentMode === "1") return 5; // F√°cil (Aprendiz)
  if (currentMode === "2") return 10; // Normal
  if (currentMode === "3") return 20; // M√©dio
  if (currentMode === "4") return 50; // Dif√≠cil
  return 10; // padr√£o
}

//Fun√ß√µes de Interface
//Controle Visual
function setTimerBtnInitialState() {
  botaoPararTimer.innerText = "Timer"; // ‚úÖ Usar vari√°vel correta
  botaoPararTimer.style.backgroundColor = "inherit";
}

function setTimerBtnActiveState() {
  botaoPararTimer.innerText = "Parar";
  botaoPararTimer.style.backgroundColor = "#7b1a1a";
}

function disableGameControls() {
  campoTentativaUsuario.disabled = true; // desabilita o input de tentativa
  botaoEnviarTentativa.disabled = true; // desabilita o bot√£o de enviar
  randomizeBtn.disabled = true; // desabilita o bot√£o de gerar novos n√∫meros
  botaoDica.disabled = true; // desabilita o bot√£o de dica
}

function enableGameControls() {
  campoTentativaUsuario.disabled = false; // habilita o input de tentativa
  botaoEnviarTentativa.disabled = false; // habilita o bot√£o de enviar
  randomizeBtn.disabled = false; // habilita o bot√£o de gerar novos n√∫meros
  botaoDica.disabled = false; // habilita o bot√£o de dica
}

//Reset e Estados
function resetGame() {
  // Reseta os n√∫meros
  num1.innerText = "0";
  num2.innerText = "0";
  num3.innerText = "0";
  num4.innerText = "0";
  mediaAtual = null;

  // Reseta o timer
  displayTimer.innerText = "00";

  // Para o contador
  if (countdownInterval) {
    clearInterval(countdownInterval);
    countdownInterval = null;
  }
  setTimerBtnInitialState();

  // Reseta mensagem e campo
  userMessage.innerText = "";
  campoTentativaUsuario.value = "";

  // Reseta estados da rodada (N√ÉO pontos)
  dicaUsada = false;
  tentativaFeita = false;

  // Habilita controles
  enableGameControls();
}

function resetForNewRound() {
  // Reseta o campo de tentativa
  campoTentativaUsuario.value = "";
  userMessage.innerText = "";

  // Reseta o estado da dica
  dicaUsada = false;

  // Habilita controles
  enableGameControls();
}

function updateHintButtonState() {
  if (dicasEstaoDispon√≠veis && !dicaUsada) {
    botaoDica.disabled = false; // Habilita o bot√£o de dica
  } else {
    botaoDica.disabled = true; // Desabilita o bot√£o de dica
  }
}

// Fun√ß√£o para atualizar o display do modo atual
function updateModeDisplay() {
  const modeNames = {
    1: "Aprendiz",
    2: "Normal",
    3: "M√©dio",
    4: "Dif√≠cil",
  };

  const modeColors = {
    1: "#f8fafc", // --text-primary (branco)
    2: "#3b82f6", // --interactive-primary (azul)
    3: "#f59e0b", // --feedback-warning (amarelo)
    4: "#ef4444", // --feedback-danger (vermelho)
  };

  const modeName = modeNames[currentMode] || "Normal";
  const modeColor = modeColors[currentMode] || "#3b82f6";

  if (currentModeDisplay) {
    currentModeDisplay.textContent = modeName;
    currentModeDisplay.style.color = modeColor;
  }
}

// Fun√ß√£o para destacar o modo selecionado
function highlightSelectedMode() {
  // Remover destaque de todos os modos
  document.querySelectorAll(".gameModeOption").forEach((btn) => {
    btn.classList.remove("selected");
    btn.style.backgroundColor = "";
  });

  // Destacar o modo atual
  const selectedModeBtn = document.getElementById(`mode${currentMode}`);
  if (selectedModeBtn) {
    selectedModeBtn.classList.add("selected");

    // Cores espec√≠ficas para cada modo
    const modeBackgrounds = {
      1: "rgba(248, 250, 252, 0.1)", // Aprendiz - branco transparente
      2: "rgba(59, 130, 246, 0.2)", // Normal - azul transparente
      3: "rgba(245, 158, 11, 0.2)", // M√©dio - amarelo transparente
      4: "rgba(239, 68, 68, 0.2)", // Dif√≠cil - vermelho transparente
    };

    selectedModeBtn.style.backgroundColor =
      modeBackgrounds[currentMode] || modeBackgrounds["2"];
  }
}

//L√≥gica Principal do Jogo
//Gera√ß√£o de n√∫meros
function generateRandomNumbers(max) {
  const numbers = [];
  for (let i = 0; i < 4; i++) {
    numbers.push(Math.floor(Math.random() * max) + 1);
  }
  return numbers;
}

function generateRandom() {
  console.clear();
  userMessage.innerText = "";

  // ‚úÖ RESETAR estados da rodada
  tentativaFeita = false;
  dicaUsada = false;

  let isInteger = false;
  // Configurar range por modo
  let max;
  if (currentMode === "1") max = 10;
  else if (currentMode === "2") max = 30;
  else if (currentMode === "3") max = 50;
  else if (currentMode === "4") max = 100;
  else max = 30;

  console.log("Modo atual: " + currentMode + " | Range m√°ximo: " + max);

  while (!isInteger) {
    // Gerar n√∫meros usando sua fun√ß√£o auxiliar
    const numbers = generateRandomNumbers(max);

    // Colocar no display
    num1.innerText = numbers[0];
    num2.innerText = numbers[1];
    num3.innerText = numbers[2];
    num4.innerText = numbers[3];

    // Calcular m√©dia
    mediaAtual = calcularMedia([num1, num2, num3, num4]);
    console.log("O tipo de mediaAtual √© " + typeof mediaAtual);
    console.log("M√©dia atual: " + mediaAtual);

    if (Number.isInteger(mediaAtual)) {
      console.log(
        "A m√©dia √© um n√∫mero inteiro. O usu√°rio pode digitar sua tentativa."
      );
      isInteger = true;
    } else {
      console.log("A m√©dia √© um n√∫mero float. Gerando nova sequ√™ncia...");
    }
  }

  // ‚úÖ GARANTIR que controles sejam habilitados ap√≥s gerar n√∫meros
  enableGameControls();

  // ‚úÖ ATUALIZAR estado das dicas baseado no modo
  updateHintButtonState();

  // Timer s√≥ no modo dif√≠cil
  if (currentMode === "4") {
    startDifficultModeTimer();
  }
}

function startDifficultModeTimer() {
  // ‚úÖ CORRE√á√ÉO: Limpar timer anterior SEM desabilitar controles
  clearPreviousTimer(); // Nova fun√ß√£o espec√≠fica para isso
  setTimerBtnActiveState();

  // ‚úÖ HABILITAR o bot√£o de parar timer
  botaoPararTimer.disabled = false;

  let secondsLeft = 60;
  displayTimer.innerText = secondsLeft;
  randomizeBtn.disabled = true;
  console.log("Timer iniciado - 60 segundos no modo dif√≠cil");

  countdownInterval = setInterval(() => {
    secondsLeft--;
    displayTimer.innerText = secondsLeft;

    if (secondsLeft <= 0) {
      console.log(
        "Tempo esgotado no modo dif√≠cil! Gerando nova sequ√™ncia em 3s..."
      );
      clearPreviousTimer(); // Usar a nova fun√ß√£o
      handleTimeoutDifficultMode();
    }
  }, 1000);
}

// ‚úÖ NOVA FUN√á√ÉO: Apenas limpa timer sem afetar controles
function clearPreviousTimer() {
  if (countdownInterval) {
    clearInterval(countdownInterval);
    countdownInterval = null;
  }
  setTimerBtnInitialState();
}

// ‚úÖ CORRE√á√ÉO: stopTimer agora √© espec√≠fica para parada manual
function stopTimer() {
  // Limpa o timer
  clearPreviousTimer();

  // ‚úÖ DESABILITAR o bot√£o de parar timer novamente
  botaoPararTimer.disabled = true;

  // ‚úÖ FUNCIONALIDADE: Desabilitar controles quando timer √© parado MANUALMENTE
  campoTentativaUsuario.disabled = true;
  botaoEnviarTentativa.disabled = true;
  botaoDica.disabled = true;
  randomizeBtn.disabled = false; // ‚úÖ PERMITE gerar nova sequ√™ncia
  userMessage.innerText =
    "‚è∏Ô∏è Timer parado pelo usu√°rio - Gere uma nova sequ√™ncia";

  displayTimer.innerText = "00";
}

// ‚úÖ CORRE√á√ÉO: handleTimeoutDifficultMode melhorada
function handleTimeoutDifficultMode() {
  userMessage.innerText = `‚è∞ Tempo esgotado! A resposta era ${mediaAtual}`;
  disableGameControls(); // Desabilita tudo

  // ‚úÖ DESABILITAR o bot√£o de parar timer pois n√£o h√° mais timer rodando
  botaoPararTimer.disabled = true;

  // Aguarda 3 segundos e gera nova sequ√™ncia
  setTimeout(() => {
    generateRandom();
  }, 3000);
}

// ‚úÖ CORRE√á√ÉO: handleCorrectAnswer no modo dif√≠cil
function handleCorrectAnswer() {
  // Para o timer se estiver rodando
  if (currentMode === "4" && countdownInterval) {
    clearPreviousTimer(); // Usa a nova fun√ß√£o
    botaoPararTimer.disabled = true; // Desabilita o bot√£o de parar
  }

  pontos += pontosPorAcerto();

  // ‚úÖ NOVA ANIMA√á√ÉO: Usar fun√ß√£o de sucesso
  showSuccessMessage(`Correto! +${pontosPorAcerto()} pontos`);

  tentativaFeita = true;

  // ‚úÖ CORRE√á√ÉO: Comportamento espec√≠fico por modo
  if (currentMode === "4") {
    // Modo dif√≠cil: desabilita tudo e aguarda 3s para regenerar
    disableGameControls();

    setTimeout(() => {
      generateRandom();
    }, 3000);
  } else {
    // Outros modos: desabilita apenas input/envio, mant√©m randomize habilitado
    campoTentativaUsuario.disabled = true;
    botaoEnviarTentativa.disabled = true;
    botaoDica.disabled = true;
    randomizeBtn.disabled = false; // Permite gerar nova sequ√™ncia manualmente
  }
}

// ‚úÖ CORRE√á√ÉO: handleWrongAnswer no modo dif√≠cil
function handleWrongAnswer() {
  // Para o timer se estiver rodando
  if (currentMode === "4" && countdownInterval) {
    clearPreviousTimer(); // Usa a nova fun√ß√£o
    botaoPararTimer.disabled = true; // Desabilita o bot√£o de parar
  }

  // ‚úÖ NOVA ANIMA√á√ÉO: Usar fun√ß√£o de erro
  showErrorMessage(`Errado! A resposta era ${mediaAtual}`);

  tentativaFeita = true;

  if (currentMode === "4") {
    // Modo dif√≠cil: aguarda 3s e regenera automaticamente
    disableGameControls(); // Desabilita tudo temporariamente
    userMessage.innerText = `‚ùå Errado! A resposta era ${mediaAtual} - Nova sequ√™ncia em 3s...`;

    setTimeout(() => {
      generateRandom();
    }, 3000);
  } else {
    // ‚úÖ CORRE√á√ÉO: Outros modos deixam s√≥ o randomize habilitado
    campoTentativaUsuario.disabled = true;
    botaoEnviarTentativa.disabled = true;
    botaoDica.disabled = true;
    randomizeBtn.disabled = false; // Permite gerar nova sequ√™ncia
  }
}

function handleSubmit(event) {
  event.preventDefault(); // Previne o comportamento padr√£o do formul√°rio de recarregar a p√°gina

  if (tentativaFeita) {
    userMessage.innerText = "Voc√™ j√° fez uma tentativa nesta rodada!";
    return;
  }

  //Obter e validar a tentativa do usu√°rio
  const userGuess = parseInt(campoTentativaUsuario.value.trim());
  console.log("User Input: " + userGuess);

  if (isNaN(userGuess)) {
    //caso n√£o seja um n√∫mero
    userMessage.innerText = "Por favor, insira um n√∫mero v√°lido.";
    return;
  }

  //Verificar se a tentativa est√° correta
  if (userGuess === mediaAtual) {
    console.log("Usu√°rio acertou! Pontos antes: " + pontos);
    handleCorrectAnswer();
    console.log("Pontos ap√≥s acerto: " + pontos);
  } else {
    console.log("Usu√°rio errou. Resposta correta era: " + mediaAtual);
    handleWrongAnswer();
  }

  // Limpar o campo de entrada ap√≥s a tentativa
  campoTentativaUsuario.value = "";

  //Atualizar o display de pontos
  displayPontos.innerText = pontos;
}

// ===== EVENT LISTENERS =====
// Conectar bot√µes √†s fun√ß√µes
randomizeBtn.addEventListener("click", () => {
  generateRandom();
});

formTentativa.addEventListener("submit", (e) => {
  handleSubmit(e);
});

botaoPararTimer.addEventListener("click", () => {
  stopTimer();
});

// Bot√£o de dica
botaoDica.addEventListener("click", () => {
  showHintMessage("Dica: A m√©dia √© a soma dividida por 4!");
});

// Bot√µes de modo
document.getElementById("mode1")?.addEventListener("click", () => {
  console.log("Troca de modo. Atual: 1");
  currentMode = "1";
  dicasEstaoDispon√≠veis = false;
  updateModeDisplay();
  highlightSelectedMode();
  resetGame();
  // Fechar modal ap√≥s sele√ß√£o (apenas mobile)
  closeModal(gameModeModal);
});

document.getElementById("mode2")?.addEventListener("click", () => {
  console.log("Troca de modo. Atual: 2");
  currentMode = "2";
  dicasEstaoDispon√≠veis = false;
  updateModeDisplay();
  highlightSelectedMode();
  resetGame();
  // Fechar modal ap√≥s sele√ß√£o (apenas mobile)
  closeModal(gameModeModal);
});

document.getElementById("mode3")?.addEventListener("click", () => {
  console.log("Troca de modo. Atual: 3");
  currentMode = "3";
  dicasEstaoDispon√≠veis = true;
  updateModeDisplay();
  highlightSelectedMode();
  resetGame();
  // Fechar modal ap√≥s sele√ß√£o (apenas mobile)
  closeModal(gameModeModal);
});

document.getElementById("mode4")?.addEventListener("click", () => {
  console.log("Troca de modo. Atual: 4");
  currentMode = "4";
  dicasEstaoDispon√≠veis = true;
  updateModeDisplay();
  highlightSelectedMode();
  resetGame();
  // Fechar modal ap√≥s sele√ß√£o (apenas mobile)
  closeModal(gameModeModal);
});

// Inicializar o display do modo atual
updateModeDisplay();
highlightSelectedMode();

// ========== MODAL SYSTEM FOR MOBILE ==========

// Elementos dos modais
const rankingModal = document.getElementById("rankingCard");
const gameModeModal = document.querySelector(".gameMode-card");
const coverAllOverlay = document.querySelector(".coverAll");

// Bot√µes para abrir modais
const rankingBtn = document.getElementById("rankingCard-btn");
const gameModeBtn = document.getElementById("gameMode-btn");

// Bot√µes para fechar modais (X)
const closeRankingBtn = rankingModal?.querySelector(".fa-xmark");
const closeGameModeBtn = gameModeModal?.querySelector(".fa-xmark");

// Fun√ß√£o para verificar se est√° no mobile
function isMobileView() {
  return (
    window.innerWidth <= 720 || window.matchMedia("(max-width: 720px)").matches
  );
}

// Fun√ß√£o para abrir modal (apenas mobile)
function openModal(modal) {
  if (isMobileView() && modal) {
    modal.classList.add("active");
    modal.style.display = "flex";
    modal.style.opacity = "1";

    if (coverAllOverlay) {
      coverAllOverlay.classList.add("active");
    }

    // Prevenir scroll do body sem afetar o layout
    document.body.style.overflow = "hidden";
    document.body.style.position = "fixed";
    document.body.style.width = "100%";
  }
}

// Fun√ß√£o para fechar modal (apenas mobile)
function closeModal(modal) {
  if (isMobileView() && modal) {
    modal.classList.remove("active");
    modal.style.display = "none";
    if (coverAllOverlay) {
      coverAllOverlay.classList.remove("active");
    }
    // Restaurar scroll do body
    document.body.style.overflow = "auto";
    document.body.style.position = "";
    document.body.style.width = "";
  }
}

// Event listeners para abrir modais
rankingBtn?.addEventListener("click", (e) => {
  e.preventDefault();
  openModal(rankingModal);
});

gameModeBtn?.addEventListener("click", (e) => {
  e.preventDefault();
  openModal(gameModeModal);
});

// Event listeners para fechar modais (bot√µes X)
closeRankingBtn?.addEventListener("click", () => {
  closeModal(rankingModal);
});

closeGameModeBtn?.addEventListener("click", () => {
  closeModal(gameModeModal);
});

// Fechar modal ao clicar no overlay
coverAllOverlay?.addEventListener("click", () => {
  closeModal(rankingModal);
  closeModal(gameModeModal);
});

// Gerenciar redimensionamento da tela
window.addEventListener("resize", () => {
  if (!isMobileView()) {
    // No desktop, sempre mostrar os modais e remover classes/estilos mobile
    if (rankingModal) {
      rankingModal.classList.remove("active");
      rankingModal.style.display = "";
    }
    if (gameModeModal) {
      gameModeModal.classList.remove("active");
      gameModeModal.style.display = "";
    }
    if (coverAllOverlay) {
      coverAllOverlay.classList.remove("active");
    }
    // Resetar estilos do body
    document.body.style.overflow = "auto";
    document.body.style.position = "";
    document.body.style.width = "";
  } else {
    // Mobile - garantir que modais iniciem fechados
    if (rankingModal && !rankingModal.classList.contains("active")) {
      rankingModal.style.display = "none";
    }
    if (gameModeModal && !gameModeModal.classList.contains("active")) {
      gameModeModal.style.display = "none";
    }
  }
});

// Fun√ß√£o para inicializar o layout mobile
function initializeMobileLayout() {
  if (isMobileView()) {
    if (rankingModal) rankingModal.style.display = "none";
    if (gameModeModal) gameModeModal.style.display = "none";
    if (coverAllOverlay) coverAllOverlay.classList.remove("active");

    // Garantir que o body tenha o estilo correto
    document.body.style.overflow = "auto";
    document.body.style.position = "";
    document.body.style.width = "";
  }
}

// Inicializar estado dos modais baseado na tela
initializeMobileLayout();

// Executar tamb√©m ap√≥s o carregamento completo
document.addEventListener("DOMContentLoaded", initializeMobileLayout);
